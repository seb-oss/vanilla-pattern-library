////
/// This file contains mixins for input components
/// @group Inputs
/// @author Digital CX
////

@import '../../variables';
@import '../../utilities';
@import '../../mixins';
@import '../../colors';
@import '../../functions';

@import '../buttons/button-mixins';

/// Input field base style. Most other input types build upon this style
///
/// @access public
@mixin vanilla-field-base() {
  // Config
  $_height: vanilla-px-to-em(44px);
  $_border-color-normal: $vanilla-color-grey7;
  //

  border: (1 / 16) * 1em solid $_border-color-normal;
  border-radius: $vanilla-component-border-radius;
  outline: none;
  box-sizing: border-box;

  min-height: $_height;
  line-height: 1.5;
  font-size: vanilla-px-to-em(16px);
  font-family: $vanilla-font-seb-sans-serif;

  *,
  *::before,
  *::after {
    box-sizing: border-box;
  }

  &:hover {
    border-color: $vanilla-color-component-hover;
  }

  &:focus {
    @include vanilla-focus-outline();
    border-color: $vanilla-color-component-selected;
  }

  &:active {
    border-color: $_border-color-normal;
  }

  &[disabled] {
    background-color: $vanilla-color-component-disabled-light;
    border-color: $_border-color-normal;

    &::placeholder {
      color: $vanilla-color-component-disabled-dark;
    }
  }
}

/// Base styles for small versions of input fields
///
/// @access public
@mixin vanilla-field-base--small() {
  line-height: vanilla-px-to-rem(32);
  min-height: vanilla-px-to-rem(32);
  max-height: vanilla-px-to-rem(32);
  font-size: vanilla-px-to-rem(14);
}

/// Style for basic text field
///
/// @access public
@mixin vanilla-text-field() {
  @include vanilla-field-base();

  background-color: $vanilla-color-white;
  padding: 0 1em;
}

/// Style for basic text field -- small modifier
///
/// @access public
@mixin vanilla-text-field--small() {
  @include vanilla-field-base--small();
}

/// Style for textarea
///
/// @access public
@mixin vanilla-text-field-textarea() {
  background-color: $vanilla-color-white;
  padding: 0.5em 1em;
}

/// Style that can be added to erroneous text fields
///
/// @access public
@mixin vanilla-text-field--error() {
  $_border-bottom: vanilla-px-to-em(2) solid $vanilla-color-red;

  border-bottom: $_border-bottom;

  &:focus,
  &:active,
  &:hover {
    border-bottom: $_border-bottom;
  }
}

/// Meant to be shown below an input filed
///
/// @access public
@mixin vanilla-text-field-notice() {
  display: block;
  line-height: 1;
  font-size: vanilla-px-to-em(14);
  margin-top: vanilla-px-to-em(8);
}

/// Style that can be added to erroneous text field notice
///
/// @access public
@mixin vanilla-text-field-notice--error() {
  color: $vanilla-color-red;
}

/// Style for labels
///
/// @access public
@mixin vanilla-field-label() {
  display: block;
  line-height: 1;
  margin-top: $vanilla-base-size;
  margin-bottom: vanilla-px-to-em(8);

  font-size: vanilla-px-to-em(16px);
  font-weight: 500;

  &[disabled] {
    color: $vanilla-color-component-disabled-dark;
  }
}

/// Style for labels -- small modifier
///
/// @access public
@mixin vanilla-field-label--small() {
  font-size: vanilla-px-to-em(14px);
}

/// Style for basic text field labels
///
/// @access public
@mixin vanilla-text-field-label() {
  @include vanilla-field-label();
}

/// Shared styles for radio buttons, checkboxes and toggle switches
///
/// @access public
/// @param $_type radio, checkbox or switch
@mixin vanilla-toggle-base($_type) {
  display: inline-block;
  border-color: transparent;
  height: auto;

  input {
    appearance: none;
    opacity: 0;
    z-index: -1;
    position: absolute;
  }

  &:hover {
    border-color: transparent;
  }

  label {
    display: inline-block;
    border-radius: $vanilla-component-border-radius;
    position: relative;
    min-height: 2em;

    &:hover::before {
      border-color: $vanilla-color-component-selected;
    }
    @if ($_type == 'switch') {
      padding: 0.5em 0.75em 0.5em 4em;
    } @else {
      padding: 0.5em 0.75em 0.5em 2.5em;
    }
  }

  label::before {
    display: block;
    content: '';
    margin: 0 0.5em vanilla-px-to-em(-2px) 0;
    position: absolute;
    visibility: visible;
    outline: none;
    font-size: 1em;
    border: vanilla-px-to-em(1px) solid $vanilla-color-component-disabled-darker;
    transition: 250ms;
    @if ($_type == 'radio') {
      background-color: $vanilla-color-white;
      width: 1em;
      height: 1em;
      border-radius: 1em;
      top: 0.5em + 0.25em;
      left: 0.75em;
    }
    @if ($_type == 'switch') {
      width: vanilla-px-to-em(40px);
      height: vanilla-px-to-em(20px);
      border-radius: vanilla-px-to-em(20px);
      top: vanilla-px-to-em(10px);
      left: 0.75em;
    }
    @if ($_type == 'checkbox') {
      background-color: $vanilla-color-white;
      width: 1em;
      height: 1em;
      top: 0.5em + 0.25em;
      left: 0.75em;
    }
  }

  input:focus + label {
    box-shadow: 0 0 0 vanilla-px-to-em(1px) $vanilla-color-component-selected;
  }

  input:focus + label::before {
    @include vanilla-focus-outline();
    border-color: $vanilla-color-component-selected;
  }

  [disabled] {
    background-color: transparent;

    &:checked + label::after {
      //border-color: $vanilla-color-component-disabled-dark;
      @if ($_type == 'radio') {
        background-color: $vanilla-color-component-disabled-dark !important;
      }
    }

    &:checked + label::before {
      @if ($_type == 'checkbox' or $_type == 'switch') {
        background-color: $vanilla-color-component-disabled-dark !important;
        border-color: $vanilla-color-component-disabled-dark;
      }
    }

    + label::before {
      border-color: $vanilla-color-component-disabled-dark;
    }

    + label {
      color: $vanilla-color-component-disabled-dark;
    }
  }
}

/// Style for checkbox wrap. This is meant to be applied to elements that
/// contain an input of type checkbox.
///
/// @access public
/// @param $_type How should it be rendered? checkbox or switch
@mixin vanilla-field-toggle-wrap($_type: 'checkbox') {
  @include vanilla-field-base();
  @include vanilla-toggle-base($_type);

  input:checked + label::before {
    background-color: $vanilla-color-component-selected;
    border-color: $vanilla-color-component-selected;
  }

  @if ($_type == 'switch') {
    input:not(:checked) + label::before {
      background-color: $vanilla-color-component-disabled-dark;
      border-color: $vanilla-color-component-disabled-dark;
    }

    input + label::after {
      display: block;
      content: '';
      position: absolute;
      top: vanilla-px-to-em(11px);
      left: vanilla-px-to-em(13px);
      background-color: $vanilla-color-white;
      width: vanilla-px-to-em(18px);
      height: vanilla-px-to-em(18px);
      border-radius: 50%;
      transition: 250ms;
      border: vanilla-px-to-em(3px) solid $vanilla-color-white;
    }

    input:checked + label::after {
      left: vanilla-px-to-em(33px);
    }

    &:hover input:not(:disabled) + label::after {
      background-color: $vanilla-color-component-hover;
    }

    input:not(:disabled):focus + label::after {
      background-color: $vanilla-color-component-selected;
    }
  } @else {
    input:checked + label::after {
      display: block;
      content: '';
      position: absolute;
      top: 0.5em + 0.25em + vanilla-px-to-em(1px);
      left: 1em + vanilla-px-to-em(1px);
      box-sizing: border-box;
      background-color: transparent;
      width: (1 / 2.7) * 1em;
      border: 0 solid $vanilla-color-white;
      border-width: 0 vanilla-px-to-em(2px) vanilla-px-to-em(2px) 0;
      height: (1 / 1.5) * 1em;
      transform: rotate(40deg);
      transform-origin: 50% 50%;
    }
  }
}

/// Radio button styles
///
/// @access public
@mixin vanilla-field-radio-wrap() {
  @include vanilla-field-base();
  @include vanilla-toggle-base('radio');

  input:checked + label::after {
    display: block;
    content: '';
    position: absolute;
    top: 1em;
    left: 1em;
    background-color: $vanilla-color-component-selected;
    width: 0.5em;
    height: 0.5em;
    border-radius: 50%;
  }
}

/// Dropdown button
///
/// @access public
@mixin vanilla-field-dropdown-button() {
  @include vanilla-field-base();

  line-height: vanilla-px-to-em(44 - 2);
  padding: 0 0 0 1rem;
  cursor: pointer;
  position: relative;
  overflow: hidden;
  background-color: $vanilla-color-white;

  &::after {
    @include vanilla-icon($_glyph: '\F078', $_space: vanilla-px-to-em(44 - 2));

    float: right;
    background-color: inherit;
  }
}

/// Dropdown options
///
/// @access public
@mixin vanilla-field-dropdown-options() {
  @include vanilla-field-base();

  display: none;
  margin-top: vanilla-px-to-em(4px);
  box-shadow: 0 0 1rem 0 rgba($vanilla-color-black, 0.2);
  white-space: nowrap;
  position: absolute;
  z-index: 1;
  background-color: $vanilla-color-white;

  line-height: vanilla-px-to-em(44px);

  label,
  &__label {
    display: block;
    padding: 0 1rem;
    cursor: pointer;
    line-height: vanilla-px-to-em(44px);

    &:hover {
      background-color: $vanilla-color-component-normal;
      color: $vanilla-color-white;
    }
  }

  input {
    position: absolute;
    opacity: 0;
  }

  input {
    position: absolute;
    opacity: 0;
  }

  input:checked + label,
  input:checked + &__label,
  &__label--selected {
    background-color: $vanilla-color-component-selected;
    color: #fff;
  }

  input:focus + label,
  input:focus + &__label,
  &__label--focus {
    @include vanilla-focus-outline();
  }

  &--expanded,
  &.-expanded {
    display: block;
  }
}

/// Dropdown button -- small modifier
///
/// @access public
@mixin vanilla-field-dropdown-button--small() {
  @include vanilla-field-base--small();

  &::after {
    @include vanilla-field-base--small();
  }
}

/// Toggle selector
///
/// @access public
@mixin vanilla-field-toggle-selector() {
  $_padding_x: 1.5em;
  $_padding_y: 0.5em;
  $_iconSize: 35px;

  label,
  &__label {
    box-sizing: border-box;
    width: 100%;
    min-height: vanilla-px-to-em(72px);
    background-color: $vanilla-color-white;
    border: 1px solid $vanilla-color-grey6;
    padding: $_padding_y $_padding_x;
    font-weight: 500;
    border-radius: $vanilla-component-border-radius;
    display: flex;
    align-items: center;
    justify-content: center;
    color: $vanilla-color-text;
    text-align: center;

    &.sdv-align-left {
      text-align: left;
      justify-content: left;
    }
  }

  input {
    position: absolute;
    opacity: 0;
  }

  input:checked + label,
  .-selected &__label {
    border-color: $vanilla-color-component-selected;
    color: $vanilla-color-component-selected;
    border-width: 2px;
    padding: calc(#{$_padding_y} - 1px) calc(#{$_padding_x} - 1px);
  }

  label:hover,
  &__label:hover,
  input:checked + label:hover,
  .-selected &__label:hover {
    border-color: $vanilla-color-component-hover;
    color: $vanilla-color-component-hover;
  }

  input:focus + label,
  .-focus &__label {
    @include vanilla-focus-outline();
  }

  input:disabled + label,
  .-disabled &__label {
    background-color: $vanilla-color-grey8;
    border-color: $vanilla-color-grey8;
    color: $vanilla-color-grey7;
  }

  label,
  &__label {
    &.sdv-icon {
      position: relative;
      padding-left: vanilla-px-to-em(24 + $_iconSize + 24);

      &::before {
        width: 24 + $_iconSize + 24;
        text-align: center;
        position: absolute;
        line-height: 1;
        left: 0;
        font-size: vanilla-px-to-em($_iconSize);
      }
    }
  }

  input:checked + label,
  .-selected &__label {
    &.sdv-icon {
      padding-left: vanilla-px-to-em(24 - 1 + $_iconSize + 24);

      &::before {
        width: 24 - 1 + $_iconSize + 24 - 1;
        left: 0;
        font-size: vanilla-px-to-em($_iconSize);
      }
    }
  }
}

/// Stepper base
///
/// @access public
@mixin vanilla-stepper-base() {
  display: flex;
  align-items: center;
  border: 1px solid $vanilla-color-grey6;
  border-radius: $vanilla-component-border-radius;

  &:hover:not([disabled]) {
    border-color: $vanilla-color-component-hover;
  }

  &:focus-within {
    @include vanilla-focus-outline();
    border-color: $vanilla-color-component-selected;
  }

  &[disabled] {
    border-color: $vanilla-color-component-disabled-dark;
    background: $vanilla-color-component-disabled-light;
    color: $vanilla-color-component-disabled-dark;
  }
}

/// Stepper value
///
/// @access public
@mixin vanilla-stepper__value() {
  font-size: vanilla-px-to-rem(24px);
  min-width: vanilla-px-to-rem(64);
  margin: 0 0.2em;
  flex-grow: 1;
  text-align: center;
  font-weight: 500;
}

/// Stepper button
///
/// @access public
@mixin vanilla-stepper__button() {
  @include vanilla-button();
  @include vanilla-button-alternative();

  margin: 0; // Safari adds a margin around the button

  &:disabled {
    border: 0;
  }

  &:first-of-type {
    border-top-right-radius: 0;
    border-bottom-right-radius: 0;
  }

  &:last-of-type {
    border-top-left-radius: 0;
    border-bottom-left-radius: 0;
  }

  &:focus {
    box-shadow: none;
  }

  i {
    font-size: vanilla-px-to-rem(24px);
    vertical-align: sub;
  }
}

/// Stepper component
///
/// @access public
@mixin vanilla-stepper() {
  @include vanilla-stepper-base();

  &__value {
    @include vanilla-stepper__value();
  }

  &__button {
    @include vanilla-stepper__button();
  }
}
