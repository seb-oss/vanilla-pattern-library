// Round a number to specified digits.
//
// @access private
// @param  {Number} $number A number to round
// @param  {Number} [$digits:0] Digits to output
// @param  {String} [$mode:round] (round|ceil|floor) How to round a number
// @return {Number} A rounded number
// @example
//     decimal-round(0.333)    => 0
//     decimal-round(0.333, 1) => 0.3
//     decimal-round(0.333, 2) => 0.33
//     decimal-round(0.666)    => 1
//     decimal-round(0.666, 1) => 0.7
//     decimal-round(0.666, 2) => 0.67
//
@function _vanilla-decimal-round($number, $digits: 0, $mode: round) {
  $n: 1;
  // $number must be a number
  @if type-of($number) != number {
    @warn '#{ $number } is not a number.';
    @return $number;
  }
  // $digits must be a unitless number
  @if type-of($digits) != number {
    @warn '#{ $digits } is not a number.';
    @return $number;
  } @else if not unitless($digits) {
    @warn '#{ $digits } has a unit.';
    @return $number;
  }
  @for $i from 1 through $digits {
    $n: $n * 10;
  }
  @if $mode == round {
    @return round($number * $n) / $n;
  } @else if $mode == ceil {
    @return ceil($number * $n) / $n;
  } @else if $mode == floor {
    @return floor($number * $n) / $n;
  } @else {
    @warn '#{ $mode } is undefined keyword.';
    @return $number;
  }
}

/// Extract a unitless value from input
///
/// @access public
/// @param value A unitless value
@function vanilla-parse-int($value) {
  @return $value / ($value * 0 + 1);
}

/// Converts rem to px
///
/// @access public
/// @param rem A rem value
@function vanilla-rem-to-px($rem) {
  $value: vanilla-parse-int($rem) * $vanilla-rem-base;
  @return round($value);
}

/// Converts px to rem
///
/// @access public
/// @param px A px value
/// @param base The base size in pixels used in the calculation
@function vanilla-px-to-rem($px, $base: $vanilla-rem-base) {
  $value: 1rem * (vanilla-parse-int($px) / vanilla-parse-int($base));
  @return $value;
}

/// Converts px to em
///
/// @access public
/// @param px A px value
/// @param base The base size in pixels used in the calculation
@function vanilla-px-to-em($px, $base: 16px) {
  $value: 1em * (vanilla-parse-int($px) / vanilla-parse-int($base));
  @return $value;
}
